// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.8.0.0
//      SpecFlow Generator Version:3.8.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Test.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.8.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("Adição", Description=@"Adição é uma das operações básicas da aritmética. Na sua forma mais simples, a adição combina dois números em um único número, denominado soma, total ou resultado
Adicionar mais números corresponde a repetir a operação. Por extensão, a adição de zero, um ou uma quantidade infinita de números pode ser definida.", SourceFile="Features\\Addition.feature", SourceLine=1)]
    public partial class AdicaoFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "Addition.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("pt-BR"), "Features", "Adição", @"Adição é uma das operações básicas da aritmética. Na sua forma mais simples, a adição combina dois números em um único número, denominado soma, total ou resultado
Adicionar mais números corresponde a repetir a operação. Por extensão, a adição de zero, um ou uma quantidade infinita de números pode ser definida.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void AdicaoDeDoisNumeros(string propriedade, string operando_1, string operando_2, string resultado, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("propriedade", propriedade);
            argumentsOfScenario.Add("operando_1", operando_1);
            argumentsOfScenario.Add("operando_2", operando_2);
            argumentsOfScenario.Add("resultado", resultado);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Adição de dois números", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
 testRunner.Given(string.Format("o operando {0} e o operando {1}", operando_1, operando_2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line hidden
#line 8
 testRunner.And("realizo a operação de adição com esses operandos", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
#line 9
 testRunner.Then(string.Format("espero ter como resultado o valor de {0}", resultado), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Então ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Adição de dois números, AdicaoDoisNumeros, Variant 0", SourceLine=12)]
        public virtual void AdicaoDeDoisNumeros_AdicaoDoisNumeros_Variant0()
        {
#line 6
this.AdicaoDeDoisNumeros("clássico", "50,50", "50", "100,50", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Adição de dois números, AdicaoDoisNumeros, Variant 1", SourceLine=12)]
        public virtual void AdicaoDeDoisNumeros_AdicaoDoisNumeros_Variant1()
        {
#line 6
this.AdicaoDeDoisNumeros("comutativa", "70", "50", "121", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Adição de dois números, AdicaoDoisNumeros, Variant 2", SourceLine=12)]
        public virtual void AdicaoDeDoisNumeros_AdicaoDoisNumeros_Variant2()
        {
#line 6
this.AdicaoDeDoisNumeros("comutativa", "50", "70", "120", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Adição de dois números, AdicaoDoisNumeros, Variant 3", SourceLine=12)]
        public virtual void AdicaoDeDoisNumeros_AdicaoDoisNumeros_Variant3()
        {
#line 6
this.AdicaoDeDoisNumeros("elemento neutro", "0", "42", "42", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Adição de dois números, AdicaoDoisNumeros, Variant 4", SourceLine=12)]
        public virtual void AdicaoDeDoisNumeros_AdicaoDoisNumeros_Variant4()
        {
#line 6
this.AdicaoDeDoisNumeros("elemento oposto", "-50", "50", "0", ((string[])(null)));
#line hidden
        }
    }
}
#pragma warning restore
#endregion
